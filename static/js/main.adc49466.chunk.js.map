{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","type","placeholder","value","onChange","e","target","onKeyPress","evt","key","fetch","then","res","json","result","console","log","main","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","src","icon","alt","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LACMA,EACC,mCADDA,EAEE,2CAsDOC,MAnDf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAEAC,EAFA,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,KA2Bb,OACE,sBAAKC,UAAU,iBAAf,UACQ,uBAAOC,KAAK,OAAMD,UAAU,SAAQE,YAAY,iBAAgBC,MAAOP,EAAMQ,SAAU,SAACC,GAAD,OAAOR,EAASQ,EAAEC,OAAOH,QAAOI,WAxBlH,SAAAC,GACC,UAAXA,EAAIC,KACLC,MAAM,GAAD,OAAIjB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDkB,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GACJf,EAAWe,GACXjB,EAAS,IACTkB,QAAQC,IAAIF,SAkBPhB,EAAQmB,MACL,sBAAKjB,UAAU,OAAf,UACI,qBAAIA,UAAU,YAAd,UACI,+BAAOF,EAAQoB,OACf,8BAAMpB,EAAQqB,IAAIC,aAEtB,qBAAKpB,UAAU,OAAf,SApBC,SAACqB,GAClB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE9DD,EAAEE,UACdC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAWKE,CAAY,IAAIC,QACvC,sBAAK/B,UAAU,YAAf,UACKgC,KAAKC,MAAMnC,EAAQmB,KAAKiB,MACzB,2CAEJ,sBAAKlC,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAYmC,IAAG,4CAAuCrC,EAAQA,QAAQ,GAAGsC,KAA1D,WAAyEC,IAAKvC,EAAQA,QAAQ,GAAGwC,cAC/H,4BAAIxC,EAAQA,QAAQ,GAAGwC,wBCrChCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.adc49466.chunk.js","sourcesContent":["import React ,{useState}from 'react';\nconst api = {\n  key :\"1102b6bf624021b5bfff0c111b83b7da\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [query,setQuery]  = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt =>{\n    if(evt.key ===\"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res =>res.json())\n      .then(result => {\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      });\n    }\n  }\n  const dateBuilder =(d) =>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day  = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n  return (\n    <div className=\"main-container\">\n            <input type=\"text\"className=\"search\"placeholder=\"Search City...\"value={query}onChange={(e) => setQuery(e.target.value)}onKeyPress={search}/>\n            {weather.main && (\n                <div className=\"city\">\n                    <h2 className=\"city-name\">\n                        <span>{weather.name}</span>\n                        <sup>{weather.sys.country}</sup>\n                    </h2>\n                    <div className=\"date\">{dateBuilder(new Date())}</div>\n                    <div className=\"city-temp\">\n                        {Math.round(weather.main.temp)}\n                        <sup>&deg;C</sup>\n                    </div>\n                    <div className=\"info\">\n                        <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description} />\n                        <p>{weather.weather[0].description}</p>\n                    </div>\n                </div>\n            )}\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}